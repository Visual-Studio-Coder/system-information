export declare const DEFAULT_KEYS: string[];
export declare const COMMANDS: Record<string, {
    keys?: string[] | (() => string[]);
    cmd: string | (() => string);
}>;
export declare const digest: (data: string) => string;
export declare type DigestFn = (data: string) => string;
export interface SnOptions {
    prefix?: string;
    cwd?: string;
    file?: string;
    sudo?: boolean;
    uuid?: boolean;
    hash?: boolean | DigestFn;
    size?: number;
}
/**
 * Retrieve the serial number form system asynchronously
 *
 * @param options The options object.
 * @param options.cwd The custom current working directory
 * @param options.file The custom cache file name
 * @param options.prefix A string to be prefixed ahead of the shell
 *  command to be run. Can be used to specify a path to the `dmidecode` binary
 *  on *nix systems if it won't be found in the environment $PATH
 * @param options.sudo True to prefix the system command with `sudo`.
 *  Default is false
 * @param options.uuid True to instead try to get the UUID on the
 *  first attempt. Default is false
 * @param options.hash True to return the hashed serial number,
 *  or pass a custom hash function to digest. Default is false.
 * @param options.size Slice the serial number to specified size
 */
export declare function sn(options?: SnOptions): Promise<string | undefined>;
export declare function snSync(options?: SnOptions): string | undefined;
export interface CacheOptions {
    cwd?: string;
    file?: string;
}
export declare function resolveCacheFilePath(options?: CacheOptions): string;
