
var exec	= require('child_process').execSync;
var crypto = require('crypto');

module.exports.sn = function () {
	var hf = '';
	var rs = '';

	switch (process.platform) {
		case 'win32':
			cmd = 'wmic csproduct get IdentifyingNumber';
			hf = exec(cmd).toString().trim().split(/\r/im)[2].trim();
			break;

		case 'darwin':
			cmd = 'system_profiler SPHardwareDataType | grep Serial';
			hf = exec(cmd).toString().replace(/.*:\s?(\w+)$/img, "$1");
			break;

		case 'linux':
			cmd = __filename.substr(0, __filename.lastIndexOf("/")) + "/lib/cpuid | grep serial | grep -v =";
			hf = exec(cmd).toString().trim().split(/\r|\n/im)[0].replace(/.*:\s*(.*)/, "$1").trim();
			break;

		case 'freebsd':
			cmd = __filename.substr(0, __filename.lastIndexOf("/")) + "/lib/cpuid";
			break;
	}

	return crypto.createHash('md5').update(hf).digest('hex').toUpperCase().replace(/(\w{8})(\w{4})(\w{4})(\w{4})(\w{12})/, '$1-$2-$3-$4-$5');
};

module.exports.check = function (license) {
	return license == module.exports.license();
};

module.exports.license = function () {
	let sn = module.exports.sn();
	return crypto.createHash('md5').update(sn).digest('hex').toUpperCase().replace(/(\w(\w))/ig, "$2").replace(/(\w{4})(\w{2})(\w{2})(\w{2})(\w{6})/, '$1-$2-$3-$4-$5');
};