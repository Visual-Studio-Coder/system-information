"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const utils_1 = require("../utils");
const CMD_CPU_SERIAL = "cat /proc/cpuinfo | grep Serial | cut -f 2 -d ':'";
const CMD_DMI_SERIAL = "dmidecode -t system | grep Serial | cut -d ':' -f 2";
module.exports = function (prefix) {
    return __awaiter(this, void 0, void 0, function* () {
        prefix = prefix || '';
        const cmd = process.arch === 'arm' ? CMD_CPU_SERIAL : CMD_DMI_SERIAL;
        let result = yield utils_1.exec(prefix + cmd);
        if (!result) {
            result = result.toString().trim();
        }
        try {
            if (!parseInt(result))
                result = '';
        }
        catch (e) {
        }
        if (!result) {
            result = (yield utils_1.fromCallback(cb => require('getmac').getMac(cb)));
        }
        if (!result) {
            throw new Error('Can not retrieve serial number for ' + process.platform + '@' + process.arch);
        }
        return {
            raw: result
        };
    });
};
//# sourceMappingURL=linux.js.map